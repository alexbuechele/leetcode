# 4. Median of Two Sorted Arrays

class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        len1 = len(nums1)
        len2 = len(nums2)
        
        #make shorter list nums1
        if len2 < len1:
            nums1, nums2 = nums2, nums1
            len1, len2 = len2, len1
        
        start1, start2, end1, end2 = 0, 0, len1-1, len2-1
        
        #shrink larger array to possible values
        if len2 > len1 + 2:
            if (len2-len1)%2 == 0:
                start2 = (len2-len1-2)//2
                end2 = start2 + len1 + 1
            else:
                start2 = (len2-len1-1)//2
                end2 = start2 + len1
        
        # main loop
        while start1 < end1 - 1 and start2 < end2 - 1:
            # look to left if range is even in length
            mid1 = (start1 + end1)//2
            exact_mid1 = ((end1 - start1)%2 == 0)
            mid2 = (start2 + end2)//2
            exact_mid2 = ((end2 - start2)%2 == 0)

            mid1_v = nums1[mid1]
            mid2_v = nums2[mid2]

            if mid1_v == mid2_v:
                # is it true mid for one?
                if exact_mid1 or  exact_mid2:
                    return mid1_v
                # otherwise drop as many on left and right as possible
                else:
                    start1 = mid1
                    start2 = mid2
                    end1 = mid1 + 1
                    end2 = mid2 + 1     

            elif mid1_v > mid2_v:
                # drop values to the left of smaller number, to right of larger
                # number dropped is limited by min of the two
                if exact_mid1:
                    right_drops = end1 - mid1
                else:
                    right_drops = end1 - mid1 - 1
                left_drops = mid2 - start2
                drops = min(left_drops, right_drops)
                end1 = end1 - drops
                start2 = start2 + drops
                

            elif mid1_v < mid2_v:
                if exact_mid2:
                    right_drops = end2 - mid2
                else:
                    right_drops = end2 - mid2 - 1
                left_drops = mid1 - start1
                drops = min(left_drops, right_drops)
                end2 = end2 - drops
                start1 = start1 + drops
        
        # the meat of the problem is done in O(log(min(m, n)))
        # let's finish the rest ... 
        combined = nums1[start1:end1+1]
        combined.extend(nums2[start2:end2+1])
        combined.sort()
        com_len = len(combined)
        median = (combined[com_len//2] + combined[(com_len - 1)//2])/2
        return median
        
        
