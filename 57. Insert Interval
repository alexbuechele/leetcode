# 57. Insert Interval

# Given a set of non-overlapping intervals, insert a new interval into the intervals 
# (merge if necessary).

# You may assume that the intervals were initially sorted according to their start times.

# Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

class Solution:
    def insert(self, intervals: List[Interval], newInterval: Interval) -> List[Interval]:
        
        
        size = len(intervals)

        # binary search for prefix first
        start = 0
        end = size - 1
        while start <= end:
            mid = (start + end) // 2
            if intervals[mid].end < newInterval.start:
                start = mid + 1
            else:
                end = mid - 1
        excluded_head_last_index = end
        
        # binary search for suffix
        start = excluded_head_last_index + 1
        end = size - 1
        while start <= end:
            mid = (start + end) // 2
            if intervals[mid].start > newInterval.end:
                end = mid - 1
            else: 
                start = mid + 1
        excluded_tail_first_index = start
        
        # find and set new combined interval values
        new_combined_interval_start = newInterval.start
        if excluded_head_last_index + 1 < size:
            if new_combined_interval_start > intervals[excluded_head_last_index + 1].start:
                new_combined_interval_start = intervals[excluded_head_last_index + 1].start
        
        new_combined_interval_end = newInterval.end
        if excluded_tail_first_index -1 >= 0:
            if new_combined_interval_end < intervals[excluded_tail_first_index - 1].end:
                new_combined_interval_end = intervals[excluded_tail_first_index - 1].end
                
        combined_middle_interval = Interval(new_combined_interval_start, new_combined_interval_end)
        

        
        # if we are replacing a single element, avoid expensive building of new list
        # just replace element
        if excluded_head_last_index == excluded_tail_first_index + 2:
            intervals[excluded_head_last_index + 1] = combined_middle_interval
            return intervals
        

        if excluded_head_last_index < 0:
            if excluded_tail_first_index >= size:
                return [combined_middle_interval]
            else:
                return [combined_middle_interval] + intervals[excluded_tail_first_index:]
        else:
            if excluded_tail_first_index >= size:
                return intervals[0:excluded_head_last_index + 1] + [combined_middle_interval]
            else:
                return intervals[0:excluded_head_last_index + 1] + [combined_middle_interval] + \
            (intervals[excluded_tail_first_index:])
